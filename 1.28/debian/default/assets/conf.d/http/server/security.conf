# The emitting of the 'Referrer-Policy' response header by NGINX is done in two steps and
# only if the proxied application has not already emit it. This is the second step.
#
# Sets the response header to the value of the variable.
#
# If the variable has an empty value, the response header will not emitted by NGINX,
# but the value of the proxied application is used instead.
add_header Referrer-Policy $response_header_referrer_policy always;

# The emitting of the 'X-Frame-Options' response header by NGINX is done in two steps and
# only if the proxied application has not already emit it. This is the second step.
#
# Sets the response header to the value of the variable.
#
# If the variable has an empty value, the response header will not emitted by NGINX,
# but the value of the proxied application is used instead.
add_header X-Frame-Options $response_header_x_frame_options always;

# The emitting of the 'X-Content-Type-Options' response header by NGINX is done in two steps and
# only if the proxied application has not already emit it. This is the second step.
#
# Sets the response header to the value of the variable.
#
# If the variable has an empty value, the response header will not emitted by NGINX,
# but the value of the proxied application is used instead.
add_header X-Content-Type-Options $response_header_x_content_type_options always;

# The emitting of the 'X-Content-Type-Options' response header by NGINX is done in two steps and
# only if the proxied application has not already emit it. This is the second step.
#
# Sets the response header to the value of the variable.
#
# If the variable has an empty value, the response header will not emitted by NGINX,
# but the value of the proxied application is used instead.
add_header X-XSS-Protection $response_header_x_xss_protection always;
